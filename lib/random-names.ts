const FIRST_NAMES = [
  "Alex",
  "Jordan",
  "Taylor",
  "Morgan",
  "Casey",
  "Riley",
  "Avery",
  "Quinn",
  "Blake",
  "Cameron",
  "Drew",
  "Emery",
  "Finley",
  "Harper",
  "Hayden",
  "Jamie",
  "Kendall",
  "Logan",
  "Marley",
  "Parker",
  "Peyton",
  "Reese",
  "Sage",
  "Skyler",
  "Tatum",
  "Teagan",
  "Wren",
  "Zion",
  "Ari",
  "Briar",
  "Charlie",
  "Dakota",
  "Eden",
  "Ellis",
  "Emerson",
  "Gray",
  "Indigo",
  "Jules",
  "Kai",
  "Lane",
  "Lennox",
  "Lux",
  "Marlowe",
  "Nova",
  "Ocean",
  "Phoenix",
  "River",
  "Rowan",
  "Scout",
  "Shiloh",
  "Storm",
  "True",
  "Vale",
  "Winter",
  "Zara",
  "Zen",
  "Aspen",
  "Atlas",
  "Aubrey",
  "August",
  "Autumn",
  "Azalea",
  "Bay",
  "Beau",
  "Bellamy",
  "Blue",
  "Bowie",
  "Bryce",
  "Caden",
  "Cali",
  "Camden",
  "Cedar",
  "Cleo",
  "Cove",
  "Cruz",
  "Cypress",
  "Dani",
  "Dash",
  "Denver",
  "Dove",
  "Echo",
  "Ember",
  "Ezra",
  "Faye",
  "Fox",
  "Gage",
  "Gem",
  "Grayson",
  "Haven",
  "Hollis",
  "Honor",
  "Hunter",
  "Iris",
  "Ivy",
  "Jax",
  "Jett",
  "Journey",
  "Justice",
  "Knox",
  "Lake",
  "Lark",
  "Lexi",
  "Luna",
  "Lyric",
  "Maddox",
  "Maple",
  "Max",
  "Meadow",
  "Miles",
  "Milo",
  "Nico",
  "Noel",
  "Onyx",
  "Orion",
  "Paige",
  "Palmer",
  "Piper",
  "Poppy",
  "Presley",
  "Rain",
  "Raven",
  "Remy",
  "Ryder",
  "Sage",
  "Salem",
  "Sasha",
  "Sawyer",
  "Sloan",
  "Stella",
  "Sunny",
  "Tate",
  "Theo",
  "Timber",
  "Trace",
  "Vega",
  "Violet",
  "Wade",
  "Willow",
  "Zoe",
  "Zuri",
]

const LAST_NAMES = [
  "Anderson",
  "Brown",
  "Chen",
  "Davis",
  "Evans",
  "Foster",
  "Garcia",
  "Harris",
  "Johnson",
  "Kim",
  "Lee",
  "Martinez",
  "Nelson",
  "O'Connor",
  "Patel",
  "Quinn",
  "Rodriguez",
  "Smith",
  "Taylor",
  "Underwood",
  "Valdez",
  "Williams",
  "Young",
  "Zhang",
  "Adams",
  "Baker",
  "Clark",
  "Diaz",
  "Edwards",
  "Fisher",
  "Green",
  "Hill",
  "Jackson",
  "King",
  "Lewis",
  "Miller",
  "Moore",
  "Parker",
  "Roberts",
  "Scott",
  "Thompson",
  "Turner",
  "Walker",
  "White",
  "Wilson",
  "Wright",
  "Allen",
  "Bell",
  "Cooper",
  "Gray",
  "Hall",
  "James",
  "Jones",
  "Long",
  "Morgan",
  "Reed",
  "Abbott",
  "Archer",
  "Armstrong",
  "Barton",
  "Bennett",
  "Bishop",
  "Blake",
  "Boyd",
  "Brooks",
  "Burke",
  "Burns",
  "Butler",
  "Campbell",
  "Carter",
  "Casey",
  "Chambers",
  "Chapman",
  "Cole",
  "Collins",
  "Cook",
  "Cox",
  "Crawford",
  "Cross",
  "Curtis",
  "Dean",
  "Dixon",
  "Duncan",
  "Ellis",
  "Fields",
  "Fletcher",
  "Flynn",
  "Ford",
  "Fox",
  "Freeman",
  "Gardner",
  "Gibson",
  "Gilbert",
  "Goodman",
  "Gordon",
  "Graham",
  "Grant",
  "Griffin",
  "Hamilton",
  "Hansen",
  "Harper",
  "Harrison",
  "Hart",
  "Hayes",
  "Henderson",
  "Henry",
  "Hoffman",
  "Holmes",
  "Howard",
  "Hudson",
  "Hughes",
  "Hunt",
  "Hunter",
  "Jenkins",
  "Jordan",
  "Kelly",
  "Kennedy",
  "Knight",
  "Lane",
  "Lawrence",
  "Lynch",
  "Mason",
  "Matthews",
  "Mitchell",
  "Murphy",
  "Murray",
  "Myers",
  "Nash",
  "Newman",
  "Nichols",
  "Palmer",
  "Patterson",
  "Pearson",
  "Perry",
  "Peterson",
  "Phillips",
  "Pierce",
  "Porter",
  "Powell",
  "Price",
  "Reynolds",
  "Richards",
  "Richardson",
  "Riley",
  "Ross",
  "Russell",
  "Sanders",
  "Shaw",
  "Simpson",
  "Stone",
  "Sullivan",
  "Torres",
  "Tucker",
  "Wallace",
  "Ward",
  "Warren",
  "Watson",
  "Webb",
  "Wells",
  "West",
]

// Track used first names and last names separately to ensure uniqueness
const usedFirstNames = new Set<string>()
const usedLastNames = new Set<string>()

export function generateUniqueRandomName(seed: string): string {
  // Create a simple hash from the seed for consistent randomization
  let hash = 0
  for (let i = 0; i < seed.length; i++) {
    const char = seed.charCodeAt(i)
    hash = (hash << 5) - hash + char
    hash = hash & hash // Convert to 32-bit integer
  }

  // Use absolute value to ensure positive number
  const absHash = Math.abs(hash)

  let attempts = 0
  let firstName: string
  let lastName: string

  do {
    const modifiedHash = absHash + attempts
    const firstIndex = modifiedHash % FIRST_NAMES.length
    firstName = FIRST_NAMES[firstIndex]
    attempts++

    if (attempts > FIRST_NAMES.length) {
      // Fallback: add number suffix if we run out of unique first names
      firstName = `${FIRST_NAMES[absHash % FIRST_NAMES.length]}${attempts - FIRST_NAMES.length}`
      break
    }
  } while (usedFirstNames.has(firstName))

  attempts = 0
  do {
    const modifiedHash = Math.floor(absHash / FIRST_NAMES.length) + attempts
    const lastIndex = modifiedHash % LAST_NAMES.length
    lastName = LAST_NAMES[lastIndex]
    attempts++

    if (attempts > LAST_NAMES.length) {
      // Fallback: add number suffix if we run out of unique last names
      lastName = `${LAST_NAMES[Math.floor(absHash / FIRST_NAMES.length) % LAST_NAMES.length]}${attempts - LAST_NAMES.length}`
      break
    }
  } while (usedLastNames.has(lastName))

  usedFirstNames.add(firstName)
  usedLastNames.add(lastName)

  return `${firstName} ${lastName}`
}

// Reset function for testing or when starting fresh
export function resetUsedNames(): void {
  usedFirstNames.clear()
  usedLastNames.clear()
}
